"use strict";(self.webpackChunkef_website_template=self.webpackChunkef_website_template||[]).push([[86],{3905:(e,n,i)=>{i.d(n,{Zo:()=>u,kt:()=>c});var r=i(7294);function t(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function a(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,r)}return i}function l(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?a(Object(i),!0).forEach((function(n){t(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function o(e,n){if(null==e)return{};var i,r,t=function(e,n){if(null==e)return{};var i,r,t={},a=Object.keys(e);for(r=0;r<a.length;r++)i=a[r],n.indexOf(i)>=0||(t[i]=e[i]);return t}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)i=a[r],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(t[i]=e[i])}return t}var p=r.createContext({}),s=function(e){var n=r.useContext(p),i=n;return e&&(i="function"==typeof e?e(n):l(l({},n),e)),i},u=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var i=e.components,t=e.mdxType,a=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=s(i),c=t,g=m["".concat(p,".").concat(c)]||m[c]||d[c]||a;return i?r.createElement(g,l(l({ref:n},u),{},{components:i})):r.createElement(g,l({ref:n},u))}));function c(e,n){var i=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var a=i.length,l=new Array(a);l[0]=m;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:t,l[1]=o;for(var s=2;s<a;s++)l[s]=i[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,i)}m.displayName="MDXCreateElement"},3259:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var r=i(7462),t=(i(7294),i(3905));const a={},l="Compiler",o={unversionedId:"compiler",id:"compiler",title:"Compiler",description:"Aufgabe eines Compilers",source:"@site/docs/compiler.md",sourceDirName:".",slug:"/compiler",permalink:"/EF-Informatik/docs/compiler",draft:!1,editUrl:"https://github.com/GraficPixelTDSM/EF-Informatik/tree/main/docs/compiler.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Steckbrief",permalink:"/EF-Informatik/docs/about-me"},next:{title:"Netzwerke",permalink:"/EF-Informatik/docs/netzwerke/"}},p={},s=[{value:"Aufgabe eines Compilers",id:"aufgabe-eines-compilers",level:2},{value:"Wie kann ein Compiler Code-Optimieren?",id:"wie-kann-ein-compiler-code-optimieren",level:2},{value:"Function Inlining",id:"function-inlining",level:3},{value:"Constant Folding",id:"constant-folding",level:3},{value:"Loop Unrolling",id:"loop-unrolling",level:3},{value:"Dead Code Elimination",id:"dead-code-elimination",level:3},{value:"Peephole Optimization",id:"peephole-optimization",level:3},{value:"\u2b50 Instruction Pipelining",id:"-instruction-pipelining",level:3}],u={toc:s};function d(e){let{components:n,...a}=e;return(0,t.kt)("wrapper",(0,r.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"compiler"},"Compiler"),(0,t.kt)("h2",{id:"aufgabe-eines-compilers"},"Aufgabe eines Compilers"),(0,t.kt)("p",null,"Ein Compiler ist eine ",(0,t.kt)("strong",{parentName:"p"},"Software zur \xdcbersetzung des Quellcodes einer Programmiersprache in einen f\xfcr den Computer und dessen Betriebssystem ausf\xfchrbaren Maschinencode"),". Diese \xdcbersetzung wird normalerweise in eine neue Datei gespeichert."),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://de.wikipedia.org/wiki/Compiler"},"https://de.wikipedia.org/wiki/Compiler"),"\ud83d\ude01"),(0,t.kt)("h2",{id:"wie-kann-ein-compiler-code-optimieren"},"Wie kann ein Compiler Code-Optimieren?"),(0,t.kt)("h3",{id:"function-inlining"},"Function Inlining"),(0,t.kt)("p",null,"Anstatt eine Funktion aufzurufen, wird oft f\xfcr kurze Funktionen der Code der Funktion direkt an der Stelle, wo die Funktion aufgerufen w\xfcrde, eingef\xfcgt. "),(0,t.kt)("p",null,"Vor dem Compilen:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"def add(a, b):\n  return a + b\n\na = 2\nb = 3\nprint(add(a, b)) # Hier geht das Programm zur Adresse im Code, wo die Funktion definiert ist\n")),(0,t.kt)("p",null,"Nach dem Compilen :"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"def add(a, b):\n  return a + b\n\na = 2\nb = 3\nprint(a + b) # Der Code ist direkt eingef\xfcgt worden\n")),(0,t.kt)("admonition",{type:"info"},(0,t.kt)("p",{parentName:"admonition"},"Es ist billiger ein paar Linien mehr im Programm, also im RAM zu speichern, als ein neues Frame auf den Stack zu platzieren, denn das braucht mehr Zeit")),(0,t.kt)("h3",{id:"constant-folding"},"Constant Folding"),(0,t.kt)("p",null,"Beim Compilen werden Befehle nicht nur in Maschinenlesbare Sprache \xfcbersetzt, sondern auch noch optimiert um sie effizienter zu machen. Diese Technik wird Constant Folding genannt. Konstanten werden z.B. schon vorher berechnet (w\xe4hrend dem Kompilieren), was auch die Gr\xf6sse des Codes reduziert. Wird x als 5 + 3 ","*"," 2 definiert, um sp\xe4ter ausgedruckt zu werden, wird der Wert f\xfcr x schon vorher berechnet (hier 11) und x wird mit diesem Wert ersetzt."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"x = 5 + 3 * 2\nprint(x)\n\n# Compiling \\/ (x = 11)\n\nprint(11)\n")),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/constant-folding/"},"https://www.geeksforgeeks.org/constant-folding/")),(0,t.kt)("p",null,"Folding ist eine Optimierungstechnik, die Ausdr\xfccke eliminiert, die einen Wert berechnen, der bereits vor der Codeausf\xfchrung bestimmt werden kann. Dabei handelt es sich in der Regel um Berechnungen, die nur auf konstante Werte verweisen, oder um Ausdr\xfccke, die auf Variablen verweisen, deren Werte konstant sind"),(0,t.kt)("p",null,"Betrachten Sie zum Beispiel die Aussage"),(0,t.kt)("p",null,"Die meisten Compiler w\xfcrden eigentlich keine zwei Multiplikationsanweisungen generieren. Stattdessen identifizieren sie Konstrukte wie diese und ersetzen die berechneten Werte (in diesem Fall 2048000). Auf diese Weise wird der Code ersetzt."),(0,t.kt)("h3",{id:"loop-unrolling"},"Loop Unrolling"),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Loop unrolling")," ist eine Optimierungsmethode, die die ",(0,t.kt)("a",{parentName:"p",href:"https://de.wikipedia.org/wiki/Laufzeit_(Informatik)",title:"Laufzeit (Informatik)"},"Laufzeit")," eines ",(0,t.kt)("a",{parentName:"p",href:"https://de.wikipedia.org/wiki/Computerprogramm",title:"Computerprogramm"},"Computerprogramms")," auf Kosten der Gr\xf6\xdfe seiner ",(0,t.kt)("a",{parentName:"p",href:"https://de.wikipedia.org/wiki/Ausf%C3%BChrbare_Datei",title:"Ausf\xfchrbare Datei"},"Programmdatei")," beschleunigen kann. Dabei wird eine ",(0,t.kt)("a",{parentName:"p",href:"https://de.wikipedia.org/wiki/Schleife_(Programmierung)",title:"Schleife (Programmierung)"},"Schleife")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"entweder durch eine \xe4quivalente Schleife ersetzt, die mehrere Kopien des Schleifenrumpfes enth\xe4lt und daf\xfcr eine geringere Anzahl an Durchl\xe4ufen hat,"),(0,t.kt)("li",{parentName:"ul"},"oder komplett aufgel\xf6st, indem der Schleifenrumpf so oft aneinandergereiht wird, wie die urspr\xfcngliche Anzahl Durchl\xe4ufe war.")),(0,t.kt)("p",null,"Dadurch wird die Schleifenbedingung seltener oder gar nicht mehr \xfcberpr\xfcft."),(0,t.kt)("p",null,"Moderne\xa0Compiler\xa0versuchen Schleifen automatisch zu entrollen, falls auf Geschwindigkeit optimiert werden soll.\xa0Ist bekannt, auf welcher\xa0Architektur\xa0genau ein Programm sp\xe4ter ausgef\xfchrt wird, kann eine manuelle Optimierung jedoch \xfcberlegen sein.\xa0"),(0,t.kt)("p",null,"Beispiel Python :)"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},'# Kein Loop unrolling\nfor i in range(5)\n  print("Hello") # Hello 5 mal ausgeben\n  \n # Unrolled Loop\n print("Hello")\n print("Hello")\n print("Hello")\n print("Hello")\n print("Hello")\n')),(0,t.kt)("p",null,"Beispiel C:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-clike"},'for (int i=0; i<5; i++) // Abbruchsbedingung i<5 muss jedes mal \xfcberpr\xfcft werden, i++ muss jedes mal ausgef\xfchrt werden\n  printf("Hello\\n");\n  \nprintf("Hello\\n");\nprintf("Hello\\n");\nprintf("Hello\\n");\nprintf("Hello\\n");\nprintf("Hello\\n"); // Es ist effizienter, einfach 5 mal printf auszuf\xfchren\n')),(0,t.kt)("h3",{id:"dead-code-elimination"},"Dead Code Elimination"),(0,t.kt)("p",null,"Code welcher nie gebraucht wird eliminieren. \u2192 redundanter, unn\xf6tiger oder nicht-erreichbarer Code wird entfernt."),(0,t.kt)("p",null,"wird oft in der Entwicklung um Fehler zu finden im Code eingef\xfcgt, man vergisst aber nachher ihn zu l\xf6schen. Man nutzt das, um den Code zu optimieren."),(0,t.kt)("p",null,"Beispiel:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-clike"},"int foo(int x) {\n    int y = 100 / x; // toter code da y nie verwendet wird\n    int z = x * x;\n    if (z >= 0) {  // unn\xf6tig da eine zahl mal sich selbst immer positiv ist\n        return x * x;\n    } else{\n        return -1; // wird nie vorkommen da z immer gr\xf6sser als 0 sein wird\n    }\n}\n   \n")),(0,t.kt)("h3",{id:"peephole-optimization"},"Peephole Optimization"),(0,t.kt)("p",null,"Eine kleine Gruppe von Compiler-generierten Anweisungen wird durch eine gleichwertige Gruppe mit besserer Leistung ersetzt. Dazu werden meistens folgende Techniken gebraucht:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"Nullsequenzen")," - Unn\xf6tige Vorg\xe4nge l\xf6schen.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"Kombinieren von Operationen")," - Ersetzt mehrere Operationen durch eine gleichwertige.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"Algebraische Gesetze")," - Verwendet algebraische Gesetze, um Anweisungen zu vereinfachen oder neu zu ordnen.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"Sonderfallbefehle")," - Verwendet Befehle, die f\xfcr spezielle Operandenf\xe4lle konzipiert sind.")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},(0,t.kt)("strong",{parentName:"p"},"Adressmodusoperationen")," - Verwendet Adressmodi zur Vereinfachung von Code"),(0,t.kt)("p",{parentName:"li"},"\\"))),(0,t.kt)("p",null,"Dient also zu (meistens kleinen) Leistungs-Verbesserungen von Compiler-generierten Anweisungen\\n\\nBeispiele:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"x = 2\ny = x*2\nprint(y)\n\n# Peephole\nx = 2\ny = x << 1 # bin\xe4re Zahl um eine Stelle nach links verschieben: 10b wird zu 100b\nprint(y)\n")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Sehr banal: ",(0,t.kt)("inlineCode",{parentName:"li"},"a=x-1-2+3")," \u2192 optimiert zu ",(0,t.kt)("inlineCode",{parentName:"li"},"a=x"),";"),(0,t.kt)("li",{parentName:"ul"},"oder ",(0,t.kt)("inlineCode",{parentName:"li"},"a=x*0")," \u2192 ",(0,t.kt)("inlineCode",{parentName:"li"},"a=0"),"\ud83e\uddd0")),(0,t.kt)("h3",{id:"-instruction-pipelining"},"\u2b50 Instruction Pipelining"),(0,t.kt)("p",null,'Beim Pipelining wird versucht, jeden Teil des Prozessors mit einer Anweisung zu besch\xe4ftigen, indem eingehende Anweisungen in eine Reihe aufeinanderfolgender Schritte (die namensgebende \u201ePipeline") aufgeteilt werden, die von verschiedenen Prozessoreinheiten ausgef\xfchrt werden, wobei unterschiedliche Teile der Anweisung parallel verarbeitet werden. \ud83d\ude0a'),(0,t.kt)("p",null," ",(0,t.kt)("img",{src:i(7138).Z,title:" =561.5x241.5",width:"1123",height:"483"})))}d.isMDXComponent=!0},7138:(e,n,i)=>{i.d(n,{Z:()=>r});const r=i.p+"assets/images/6c3511a8-5f32-423b-8e46-c8e3b9958636-21d2eea13e4d860eb70a7b7eecbe376a.png"}}]);