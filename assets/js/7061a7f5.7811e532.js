"use strict";(self.webpackChunkef_website_template=self.webpackChunkef_website_template||[]).push([[935],{3543:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/22-08-26-wiedereinstieg-python","metadata":{"permalink":"/EF-Informatik/22-08-26-wiedereinstieg-python","editUrl":"https://github.com/GraficPixelTDSM/EF-Informatik/tree/main/blog/22-08-26-wiedereinstieg-python.md","source":"@site/blog/22-08-26-wiedereinstieg-python.md","title":"Wiedereinstieg in Python nach einer l\xe4ngeren Pause","description":"Mein Wiedereinstieg in Python war nicht einmal so schwierig. Ich wusste noch die meisten Sachen, musste aber trotzdem ein paar mal spicken.","date":"2023-03-21T22:43:45.000Z","formattedDate":"21. M\xe4rz 2023","tags":[],"readingTime":0.67,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"nextItem":{"title":"22-09-03-Primzahlen berechnen","permalink":"/EF-Informatik/22-09-03-Primzahlen berechnen"}},"content":"![](./images/OIP.jpg)\\n\\nMein Wiedereinstieg in Python war nicht einmal so schwierig. Ich wusste noch die meisten Sachen, musste aber trotzdem ein paar mal spicken.   \\n\\nIch habe mit turtle angefangen. Dort gibt es Befehle wie `forward()`, `left()`, `right()` usw. welche mir im Kopf geblieben sind. Andere Befehle wie `penup()` oder `pencolor()` wusste ich z.B. nicht mehr.  \\n\\nEs ist mir nicht nur einmal passiert, dass ich `rigth()` anstelle von `right()` geschrieben habe. Dann habe ich lange nach dem Fehler gesucht und als ich ihn endlich gefunden habe, kam ein verwundertes \\"Ooooh\\".\\n\\nDanach ging es darum schleifen zu machen, damit man einzelne Codeabschnitte nicht hundert mal wiederholen muss, aber ich habe schon Schleifen gemacht, bevor es \xfcberhaupt eingef\xfchrt wurde.  \\n\\nZu guter letzt, war es die Aufgabe, Fehler in einem Code zu finde. das fiel mir aber auch leicht."},{"id":"/22-09-03-Primzahlen berechnen","metadata":{"permalink":"/EF-Informatik/22-09-03-Primzahlen berechnen","editUrl":"https://github.com/GraficPixelTDSM/EF-Informatik/tree/main/blog/22-09-03-Primzahlen berechnen.md","source":"@site/blog/22-09-03-Primzahlen berechnen.md","title":"22-09-03-Primzahlen berechnen","description":"Primzahlen berechnen","date":"2023-03-21T22:43:45.000Z","formattedDate":"21. M\xe4rz 2023","tags":[],"readingTime":0.395,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Wiedereinstieg in Python nach einer l\xe4ngeren Pause","permalink":"/EF-Informatik/22-08-26-wiedereinstieg-python"},"nextItem":{"title":"arbeiten-an-numtrip","permalink":"/EF-Informatik/22-12-02-arbeiten-an-numtrip"}},"content":"## Primzahlen berechnen \\nIch habe heute ein Programm geschrieben welches die Primzahlen von 1 bis zu einer beliebigen Zahl berechnet. W\xe4hrend der Berechnung werden die Primzahlen ausgegeben und in eine Liste zwischengespeichert.  \\nBei der Ausgabe w\xe4hrend der Berechnung steht auch noch der Fortschritt in Prozent und am Schluss wird noch angezeigt, wie lange die Berechnung gedauert hat (in Sekunden).  \\nDamit man einen guten \xdcberblick \xfcber die Primzahlen hat, werden diese am Schluss auch noch geb\xfcndelt in einer Liste ausgegeben."},{"id":"/22-12-02-arbeiten-an-numtrip","metadata":{"permalink":"/EF-Informatik/22-12-02-arbeiten-an-numtrip","editUrl":"https://github.com/GraficPixelTDSM/EF-Informatik/tree/main/blog/22-12-02-arbeiten-an-numtrip.md","source":"@site/blog/22-12-02-arbeiten-an-numtrip.md","title":"arbeiten-an-numtrip","description":"Heute habe ich bei meinem Spiel einige Fehler korrigiert und einige unn\xf6tige Codeabschnitte gel\xf6scht.","date":"2023-03-21T22:43:45.000Z","formattedDate":"21. M\xe4rz 2023","tags":[],"readingTime":0.17,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"22-09-03-Primzahlen berechnen","permalink":"/EF-Informatik/22-09-03-Primzahlen berechnen"},"nextItem":{"title":"NumTrip - Fertig","permalink":"/EF-Informatik/23-01-19-Das-Spiel-ist-fertig"}},"content":"Heute habe ich bei meinem Spiel einige Fehler korrigiert und einige unn\xf6tige Codeabschnitte gel\xf6scht.\\nIch habe Pylint deinstallier, da es mir immer unn\xf6tige Fehler angezeigt hat.\\nIch hatte nirgends Schwierigkeiten und brauche keine Hilfe."},{"id":"/23-01-19-Das-Spiel-ist-fertig","metadata":{"permalink":"/EF-Informatik/23-01-19-Das-Spiel-ist-fertig","editUrl":"https://github.com/GraficPixelTDSM/EF-Informatik/tree/main/blog/23-01-19-Das-Spiel-ist-fertig.md","source":"@site/blog/23-01-19-Das-Spiel-ist-fertig.md","title":"NumTrip - Fertig","description":"Einleitung","date":"2023-03-21T22:43:45.000Z","formattedDate":"21. M\xe4rz 2023","tags":[],"readingTime":2.2,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"arbeiten-an-numtrip","permalink":"/EF-Informatik/22-12-02-arbeiten-an-numtrip"},"nextItem":{"title":"API erstellen","permalink":"/EF-Informatik/23-03-17-Erstellen-einer-API"}},"content":"## Einleitung\\nEndlich ist es so weit. Ich habe das Spiel fertig programmiert.\\nIch bin mit meinem Resultat recht zufrieden, aber ich habe mir oft \xfcberlegt, hier und da mal ein kleines Feature einzubauen, dass ich dann aber gelassen habe.\\n## Zum Spiel Selbst\\nDas Ziel ist es, die Zahl 128 in einem K\xe4stchen zu erreichen.  \\nDann hat man gewonnen. Anschliessend wird man vom Spiel gefragt, ob man unbegrenzt weiterspielen will, oder nicht.  \\nDann ist das Ziel des Spiels, eine m\xf6glichst hohe Punktzahl zu erreichen.  \\nGl\xfccklicherweise speichert das Spiel nach jedem Zug und kann jederzeit geladen werden.\\n## Was sind die Anforderungen an die Spielenden?\\nDas Spiel wurde mit Python 3.10.6 geschrieben, d.h. kann man sich sicher sein, dass der Code mit dieser Version funktioniert.  \\nEs braucht also einen Code-Editor bzw. -Runner mit Python 3.10.6.  \\n## Wie funktioniert das Erkennen gleicher Zahlen in Nachbarfeldern?\\nZuerst muss man ein Feld ausw\xe4hlen, von welchem der Algorithmus starten soll. Dessen Koordinate wird an die Liste \'check\' angeh\xe4ngt.  \\nDann vergleicht das Spiel die Zahl bei der ausgew\xe4hlten Koordinate (x, y), mit der Zahl, der Koordinate links / rechts / dar\xfcber / darunter `(x - 1, y)` / `(x + 1, y)` / `(x, y + 1)` / `(x, y - 1)`.  \\n```py\\nanz1 = int(anzeige[y][x - 1].strip())  \\nanz2 = int(anzeige[y][x].strip())  \\nif anz2 == anz1:  \\n```\\nWenn das der Fall ist und die Zahl nicht == 0 ist, wird die Koordinate zu \'check\' hinzugef\xfcgt und die Zahl = 0 gesetzt, damit sie nicht noch einmal gepr\xfcft wird und es zu einem loop kommt.  \\n```py\\n    check[0].append(x + 1)\\n    check[1].append(y + 2)\\n    spiel[y + 1][x] = 0\\n```\\nDas wird dann auch f\xfcr  \\n`anz1 = int(anzeige[y][x + 1].strip())`,  \\n`anz1 = int(anzeige[y - 1][x].strip())` und  \\n`anz1 = int(anzeige[y + 1][x].strip())` wiederholt.  \\n## Entwicklungsherausforderungen\\nDas mit dem Speichern ist so eine Sache... Wenn man es implementiert, bevor man den ganzen Code geschrieben hat, muss man noch sehr viel umschreiben und verschieben. Dann fehlen einige Variablen, die nicht existieren, dann muss man mit `try;except` arbeiten...  \\n*aufatmen\\\\* Ja es ist kompliziert mit dem Speichern und Laden.\\n## Meine Tipps\\n- Implementiert speichern und laden erst am Schluss.\\n- Gebt Variablen Namen, aus denen man ableiten kann, wof\xfcr sie stehen.\\n- Speichert vor dem Ausf\xfchren. Manchmal hat es den Code nicht gespeichert, als ich ihn ausgef\xfchrt habe und das Programm hat mir einen Fehler angezeigt, den ich schon gel\xf6st habe,... nur nicht gespeichert.\\n- Schreibt zu schwierigen Codeelementen und Variablen die einen versteckten Nutzen haben Text, der beschreibt, was sie tun.\\n- Denkt auch in eurer Freizeit \xfcber euren Code nach. Vielleicht kommt euch ein \\"Heureka\\"-Moment indem ihr eine grandiose Idee habt."},{"id":"/23-03-17-Erstellen-einer-API","metadata":{"permalink":"/EF-Informatik/23-03-17-Erstellen-einer-API","editUrl":"https://github.com/GraficPixelTDSM/EF-Informatik/tree/main/blog/23-03-17-Erstellen-einer-API.md","source":"@site/blog/23-03-17-Erstellen-einer-API.md","title":"API erstellen","description":"In Diesem Blogeintrag lernt ihr, was eine API ist und auch, wie ihr eine eigene API aufsetzen k\xf6nnt.","date":"2023-03-21T22:43:45.000Z","formattedDate":"21. M\xe4rz 2023","tags":[],"readingTime":2.02,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"NumTrip - Fertig","permalink":"/EF-Informatik/23-01-19-Das-Spiel-ist-fertig"}},"content":"In Diesem Blogeintrag lernt ihr, was eine API ist und auch, wie ihr eine eigene API aufsetzen k\xf6nnt.  \\n\\n## Erstellen der Datenbank\\nWir fangen auf der Webseite ElephantSQL.com an. Dort Erstellen \xfcber den Knopf `+ create New Instance` eine neue Datenbank.  \\n![](./images/ElephantSQLCreate.png)   \\nAls Namen habe ich jetzt `node-red` genommen und als plan habe ich `Tiny Turtle (Free)` genommen, da das, wie der Name schon sagt, gratis ist. Wenn man will, kann man aber einen eigenen plan nehmen, falls man mit gr\xf6sseren Datenmengen arbeiten will.  \\nJetzt m\xfcssen wir nur noch die Erstellung abschliessen und sobald wir wieder bei der \xdcbersicht \xfcber unsere Instanzen sind, klicken wir auf den Namen unserer Instanz  \\n![](./images/ElephantSQLOpen.png)  \\nund kopieren die URL, die in der Tabelle bei URL: angegeben ist. Sie sollte folgendes Format haben: `postgres://...@....db.elephantsql.com...`  \\n![youtube.com](./images/ElephantSQLURL.png)  \\n\\n## Node-RED auf Render installieren \\nJetzt installieren wir \xfcber den folgenden Link Node-RED auf Render.com: `https://dashboard.render.com/login?next=/blueprint/new?repo=https://github.com/bh0fer/node-red-render-efin`  \\nAls Namen geben wir `node-red` ein, als DATABASE_URL geben wir die vorher kopierte ElephantSQL-URL ein, als Namen nehmen wir `admin` und als Passwort setzen wir selbst eines, dass sehr sicher ist. Anschliessend m\xfcssen wir nur noch auf `apply` klicken.  \\n![](./images/RenderSetup.png)  \\n\\n## Was soll die API machen?\\nWir k\xf6nnen nun \xfcber das Dashboard auf Render.com den Link zu unserer API aufrufen. Beim ersten Mal kann das ein bisschen l\xe4nger dauern, da der Server nicht konstant online ist, da es sich um einen gratis-plan handelt. Jetzt m\xfcssen wir uns anmelden und k\xf6nnen schon sagen, was die API machen soll.  \\n### Keep-Alive\\nBeim ersten Aufstarten der API haben wir gemerkt, dass das schon ein bisschen lange gedauert hat. Das liegt daran, dass der Server auf dem unsere API ist, automatisch heruntergefahren wird, um ressourcen zu sparen. Um dem zu entgehen, erstellen wir einen Flow, der den Link des Servers immer wieder aufruft, damit er online bleibt.  \\n![](./images/node-red-keepalive.png)  \\nFangen wir beim ersten Block an. Der `ping node-red`-Block ist ein ![](./images/inject.png)Block. Bei diesem sollten noch folgende Sachen ver\xe4ndert werden, damit die Seite alle 5 Minuten aufgerufen wird:  \\n![](./images/inject_set.png)  \\nDer `http request`-Block ist ein !ACHTUNG! ![](./images/http.png)Block. Dieser sollte noch folgendermassen bearbeitet werden:  \\n![](./images/http_set.png)  \\nAls URL sollte jedoch die eigene URL eingesetzt werden.  \\nZuletzt haben wir noch den `Statuscode`-Block. Dabei handelt es sich um einen ![](./images/debug.png)Block. Dieser gibt den Statuscode `200` in der Debug-Konsole aus, wenn der Keep alive Flow erfolgreich ausgef\xfchrt wurde. Daf\xfcr m\xfcssen die Einstellungen aber wie folgt aussehen:  \\n![](./images/debug_set.png)  \\nSomit haben wir eine API erstellt, aber was k\xf6nnen wir sonst noch tun?"}]}')}}]);